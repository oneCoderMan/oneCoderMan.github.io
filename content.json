{"meta":{"title":"CoderSim's Growth Diary","subtitle":"extoll the world's best C and Java","description":null,"author":"CoderSim","url":"http://yoursite.com","root":"/"},"pages":[{"title":"categories ALL Log","date":"2019-09-23T12:23:34.000Z","updated":"2019-09-23T12:36:08.287Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"TagCloud","date":"2019-09-23T12:17:17.000Z","updated":"2019-09-23T12:19:27.634Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-09-23T12:26:08.000Z","updated":"2019-09-23T12:27:19.023Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"V1.0created By CoderSim"}],"posts":[{"title":"ubuntu1604vnc","slug":"ubuntu1604vnc","date":"2019-10-05T11:40:54.000Z","updated":"2019-10-05T11:56:15.910Z","comments":true,"path":"2019/10/05/ubuntu1604vnc/","link":"","permalink":"http://yoursite.com/2019/10/05/ubuntu1604vnc/","excerpt":"ubuntu16.04 VNC远程桌面1. VNC简介","text":"ubuntu16.04 VNC远程桌面1. VNC简介 VNC(Virtual Network Console):虚拟网络控制台，一个远程控制的工具软件 VNC包括四个命令：vncserver, vncviewer, vncpasswd, vncconnect. VNC由两部分组成，客户端的应用软件(vncviewer)&emsp;+&emsp;服务器端的应用程序(vncserver) 2. ubuntu16.04中安装服务端程序使用SSH登录到系统 step1 1sudo apt-get update step 2 1sudo apt-get install vnc4server step 3启动vncserver 1vncserver 步骤三中会出现如下界面输入密码即可，这是客户端登陆密码。出现如下界面说明服务端安装成功 此时使用vncviewer登录出现的界面如下所示，对此需要安装一个图形化桌面 3. ubuntu16.04安装图形化桌面3.1 全ubuntu16.04桌面(不推荐)gnome环境 缺点：占用资源多 step1&emsp;安装x-windows 1sudo apt-get install x-window-system-core step2&emsp;安装登录管理器(可不选) 1sudo apt-get install gdm step3&emsp;安装ubuntu桌面 1sudo apt-get install ubuntu-desktop step4&emsp;安装gnome配套软件 1sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal step5&emsp;修改VNC配置文件，使桌面生效 1vim ~/.vnc/xstartup 变成如下文件配置 1234567891011#!/bin/sh# Uncomment the following two lines for normal desktop:export XKL_XMODMAP_DISABLE=1 unset SESSION_MANAGER# exec /etc/X11/xinit/xinitrcunset DBUS_SESSION_BUS_ADDRESSgnome-panel &amp;gnmoe-settings-daemon &amp;metacity &amp;nautilus &amp;gnome-terminal &amp; 重新启动就可以了 12vncserver -kill :1 #杀掉原桌面进程（:1)就是vncserver :1 #重新启动 3.2 ubuntu16.04剪切版(推荐)&emsp;gnome环境 优点：占用系统资源少，仅安装核心组件：不安装例如 office、浏览器、等等的额外组件 step1&emsp;安装x-windows 1sudo apt-get install x-window-system-core step2&emsp;安装登录管理器(可不选) 1sudo apt-get install gdm step3&emsp;安装ubuntu桌面(剪切版) 1apt-get install --no-install-recommends ubuntu-desktop step4&emsp;安装gnome配套软件 1sudo apt-get install gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal step5&emsp;修改VNC配置文件，使桌面生效 1vim ~/.vnc/xstartup 在文件最后添加如下记录 1234gnome-panel &amp;gnome-settings-daemon &amp;metacity &amp;nautilus &amp; 3.3 安装xfce4桌面 优点：Xfce占用的内存和CPU使用量非常小；Xfce桌面很简单，而且没有乱七八糟的东西参考文献 step 1: 1sudo apt-get install xfce4 step 2:修改配置文件该文件路径一般在下面1vi ~/.vnc/xstartup 123456#x-window-manager &amp;sesion-manager &amp; xfdesktop &amp; xfce4-panel &amp;xfce4-menu-plugin &amp;xfsettingsd &amp;xfconfd &amp;xfwm4 &amp; 4. 卸载桌面程序4.1 卸载gnome桌面 step1: 卸载掉gnome-shell主程序及其配套软件 123sudo apt-get remove gnome-shellsudo apt-get remove ubuntu-desktopsudo apt-get remove gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal step2: 清理安装gnome时候留下的缓存程序软件包 12sudo apt-get autocleansudo apt-get clean 4.2 卸载xfce4桌面 step1: 卸载xfce4 1sudo apt-get remove xfce4 step2: 卸载相关软件 1sudo apt-get remove xfce4* step3: 自动卸载不必要的软件 1sudo apt-get autoremove step4: 系统清理 1apt-get clean 5. vnc相关的重要命令 启动vncserver :1是桌面号 1vncserver :1 关闭vncserver 1vncserver -kill :1 客户端连接vncserver 12ip:1ip:5901 参考文献[1] https://blog.csdn.net/u014389734/article/details/79513517[2] http://dblab.xmu.edu.cn/blog/1998-2/[3] https://www.cnblogs.com/chenmingjun/p/8506995.html Linux的桌面环境gnome、kde、xfce、lxde 等等使用比较","categories":[{"name":"tool","slug":"tool","permalink":"http://yoursite.com/categories/tool/"}],"tags":[{"name":"Linux VNC","slug":"Linux-VNC","permalink":"http://yoursite.com/tags/Linux-VNC/"}]},{"title":"pytorch01","slug":"pytorch01","date":"2019-09-24T07:57:24.000Z","updated":"2019-10-05T11:56:12.853Z","comments":true,"path":"2019/09/24/pytorch01/","link":"","permalink":"http://yoursite.com/2019/09/24/pytorch01/","excerpt":"PyTorch入门之线性回归torch参考链接","text":"PyTorch入门之线性回归torch参考链接 1. 安装 python 3.7 Torch 1.2.0 用于计算 matplotlib 用于画图 踩坑点 Torch安装需要用到pip命令，直接在pycharm中会失败 去官网获得pip的安装的命令 Torch官网 2. PyTorch基础知识 Tensor是PyTorch的基础数据结构 另一个重要的变量是Variable变量，该变量进行自动微分运算 反向传播算法随时进行该变量三个重要的值： 数据（data），父节点（creator），以及梯度（grad） 使用之前需要导入两个包 创建变量方法如下 123456import torch#导入自动梯度的运算包，主要用Variable这个类from torch.autograd import Variable#创建一个Variable，包裹了一个2*2张量，将需要计算梯度属性置为Truex = Variable(torch.ones(2, 2), requires_grad=True) x变量如下所示 &emsp;&emsp;注意 .data 可以返回一个 Variable 所包裹的 Tensor torch.rand(5, 3)产生[0,1]的均匀分布的随机数值，参数指定形状(一维时第二个参数可不要) torch.randn(100)产生均值为0，方差为1，正态分布随机数值(同样可以指定形状) torch.linspace(start, end, steps=100, out=None) → Tensor线性间隔的数值，返回一个一维张量 y.t()完成张量的转置 Tensor可以与numpy.ndarray进行转换 ndarray转换为Tensor 12a = np.ones([5, 3]) #建立一个5*3全是1的二维数组（矩阵）b = torch.from_numpy(a) #利用from_numpy将其转换为tensor Tensor转换为ndarry 1c = b.numpy() #b为Tensor 区别 ：Tesnsor可以在GPU上运算 使用backward进行反向传播，计算一些导数信息，可通过.grad获得梯度 3. 单变量线性回归 y = ax + b 3.1 产生数据12345678910# linspace可以生成0-100之间的均匀的100个数字x = Variable(torch.linspace(0, 100).type(torch.FloatTensor))# 随机生成100个满足标准正态分布的随机数，均值为0，方差为1.# 将这个数字乘以10，标准方差变为10rand = Variable(torch.randn(100)) * 10# 将x和rand相加，得到伪造的标签数据y。# 所以(x,y)应能近似地落在y=x这条直线上y = x + rand 使用画图工具画图 1234567plt.figure(figsize=(10,8)) #设定绘制窗口大小为10*8 inch# 绘制数据，考虑到x和y都是Variable，# 需要用data获取它们包裹的Tensor，并专成numpyplt.plot(x.data.numpy(), y.data.numpy(), &apos;o&apos;)plt.xlabel(&apos;X&apos;) #添加X轴的标注plt.ylabel(&apos;Y&apos;) #添加Y轴的标注plt.show() #将图形画在下面 结果如下所示 3.2 递归下降step 1: 初始化参数（随机初始） 1234#创建a变量，并随机赋值初始化a = Variable(torch.rand(1), requires_grad = True)#创建b变量，并随机赋值初始化b = Variable(torch.rand(1), requires_grad = True) step 2: 训练1000次 123456789101112131415161718learning_rate = 0.0001 #设置学习率for i in range(1000): ### 下面这三行代码非常重要，这部分代码，清空存储在变量a，b中的梯度信息， ### 以免在backward的过程中会反复不停地累加 #如果a和b的梯度都不是空 if (a.grad is not None) and (b.grad is not None): a.grad.data.zero_() #清空a的数值 b.grad.data.zero_() #清空b的数值 #计算在当前a、b条件下的模型预测数值 predictions = a.expand_as(x) * x + b.expand_as(x) #通过与标签数据y比较，计算误差 loss = torch.mean((predictions - y) ** 2) print(&apos;loss:&apos;, loss.data.numpy()) loss.backward() #对损失函数进行梯度反传 #利用上一步计算中得到的a的梯度信息更新a中的data数值 a.data.add_(- learning_rate * a.grad.data) #利用上一步计算中得到的b的梯度信息更新b中的data数值 b.data.add_(- learning_rate * b.grad.data) a.expand_as(x) : 将a升级为同x一样维度的张量 step 3: 将训练后的结果展示出来 123456789x_data = x.data.numpy() # 获得x包裹的数据plt.figure(figsize = (10, 7)) #设定绘图窗口大小xplot, = plt.plot(x_data, y.data.numpy(), &apos;o&apos;) # 绘制原始数据yplot, = plt.plot(x_data, a.data.numpy() * x_data + b.data.numpy()) #绘制拟合数据plt.xlabel(&apos;X&apos;) #更改坐标轴标注plt.ylabel(&apos;Y&apos;) #更改坐标轴标注str1 = str(a.data.numpy()[0]) + &apos;x +&apos; + str(b.data.numpy()[0]) #图例信息plt.legend([xplot, yplot],[&apos;Data&apos;, str1]) #绘制图例plt.show() 以下是拟合结果 3.3 测试x_test = Variable(torch.FloatTensor([1, 2, 10, 100, 1000])) #随便选择一些点1，2，……，1000 predictions = a.expand_as(x_test) * x_test + b.expand_as(x_test) #计算模型的预测结果 print(predictions) #输出附录完整代码 source: https://www.shiyanlou.com/courses/1073/learning/?id=5821","categories":[{"name":"deepLearing","slug":"deepLearing","permalink":"http://yoursite.com/categories/deepLearing/"}],"tags":[{"name":"PyTorch","slug":"PyTorch","permalink":"http://yoursite.com/tags/PyTorch/"},{"name":"线性回归","slug":"线性回归","permalink":"http://yoursite.com/tags/线性回归/"}]},{"title":"shell-auto","slug":"shell-auto","date":"2019-09-11T08:32:38.000Z","updated":"2019-09-23T12:37:10.488Z","comments":true,"path":"2019/09/11/shell-auto/","link":"","permalink":"http://yoursite.com/2019/09/11/shell-auto/","excerpt":"shell脚本实现Linux系统监控 代码见 https://github.com/oneCoderMan/myCodes/blob/master/shell/auto.sh","text":"shell脚本实现Linux系统监控 代码见 https://github.com/oneCoderMan/myCodes/blob/master/shell/auto.sh 一. 预备知识1.1 getopts 作用: 处理参数复杂的命令行选项和参数格式：getopts option_string args说明： option_string中是参数列表， args从命令行中接受的值 示例代码：option.sh 12345678910111213#! /bin/bashwhile getopts f:e:p: optiondo case &quot;$&#123;option&#125;&quot; in f) file_name=$&#123;OPTARG&#125;;; e) editor=$&#123;OPTARG&#125;;; p) page=$&#123;OPTARG&#125;;; *) echo &quot;invalid&quot;;; esacdoneecho &quot;$&#123;file_name&#125;&quot;echo &quot;$&#123;editor&#125;&quot;echo $&#123;page&#125; 运行命令：./option.sh -f bool.pdf -e YiJun -p HUANAN option_string是匹配的参数,字符后面有：表示该命令中必须加上参数，如-e yijun。否则会出现错误。参数的值会保存在OPTARG变量中。 检测到非法参数就会停止 1.2 $+sign各含义 $# :Stores the number of command-line arguments that were passed to the shell program. $? :Stores the exit value of the last command that was executed. $0 :Stores the first word of the entered command (the name of the shell program). $* :Stores all the arguments that were entered on the command line ($1 $2 …). $@ :Stores all the arguments that were entered on the command line, individually quoted (“$1” “$2” …). $&gt; : 1&gt;是标准输出重定向， 可以省去1(变为 &gt; )； 2&gt;错误重定向。$&gt;是两种的结合，标准与错误重定向 &gt;$1 : 将重定向到1管道， 即定向到标准输出 如下例子：./command -yes -no /home/username 1234$# = 3$* = -yes -no /home/username$@ = array: &#123;&quot;-yes&quot;, &quot;-no&quot;, &quot;/home/username&quot;&#125;$0 = ./command, $1 = -yes etc. 1.3 tput与颜色转义参考链接 tput作用：更改终端功能 12tput sgr0 # 恢复默认终端tput blink # 文本闪烁 一个例子1-3： 12tecreset=$(tput sgr0)echo -e &apos;\\E[32m&apos;&quot;Operating System Type :&quot; $tecreset $os 结果： 说明: 如果把1-3中的$tecreset去掉，都会是绿色。 方便操作，不用每次都使用命令替换$(), ``， 因此用一个变量tecreset存储命令。 linux终端的颜色由转义序列控制 转义序列由控制符 esc开头，控制序列引导符为：\\033或者\\e[，m为转义结束。 123格式1：\\033[ Param &#123;;Param;...&#125; m格式2：\\e[ Param &#123;;Param;...&#125;m 例子1-3 参考资料 12echo -e &quot;\\033[颜色1;颜色2m 要展示的文字 \\033[0m&quot;\\033[0m：表示将颜色恢复回原来的颜色 1.4 各种括号参考文献 $()与`` 用来做命令替换的，简化shell脚本的编写 ${} 变量替换的，即变量引用 $[]与 $(()) 都是用来做数学运算的注意 : $(())中的变量前面可以加$,也可不用 [] test命令的一种形式 左右需留空格，即判断true或者false (())与[[]] 分别是数学表达式和字符表达式[]的加强版 二.监控系统脚本各模块2.1 脚本安装 -i代码如下：123456789101112if [[ $iopt -eq 1 ]]; then #对变量的引用要加上$ then如果是同一行的话要加上; &#123; #获得它的路径 wd=`pwd` #获得它的文件名 basename `echo $0` &gt; /tmp/script #拼接 scriptname=`echo -e -n $wd/ &amp;&amp; cat /tmp/script` # 加载到环境变量中去 su -c &quot;cp $scriptname /usr/bin/monitor&quot; root &amp;&amp; echo &quot;congratulations! install successful!&quot; || echo &quot;install failed!&quot; &#125;fi 代码说明 ``(反引号)是执行shell命令，可将结果保存在变量中。同$(),这个有些shell不支持。 basename 命令是将前缀和最后的/删除，保留最后一个字符串显示出来 $0 是指shell本生的文件名，sh test.sh得到 test.sh。./test.sh 得到的是./test.sh echo中的-e 用来打印转义符， -n不换行打印 su -c command USER 切换用户USER执行命令command，执行完之后返回原用户 || &amp;&amp; 在命令组合中具有短路左右，可以看成if else结构 [[ ]] (())这个是进行数学表达式和字符表达式运算的加强版。推荐使用 ,左右需留空格 -eq 是数字等于判断， 对于字符串等于使用= 2.2 关于模块 -v代码如下: 123456if [[ $vopt -eq 1]]then &#123; echo -e &quot;monitor version 1\\nreleased Under ....&quot; &#125;fi 2.3 帮助模块 -h代码如下： 12345678if [[ $hopt -eq 1 ]]then &#123; echo -e &quot; -i\\tinstall the scripts &quot; echo -e &quot; -v\\tprint version &quot; echo -e &quot; -h\\t print help info&quot; &#125;fi 2.4 查看操作系统类型 注意 ：不同操作系统对应的代码不一样啊， 本文中只讨论centOS系统.不同版本的代码见附录1 代码如下： 1234567891011121314151617181920#查看系统版本和名称OS=`uname -s`REV=`uname -r`MACH=`uname -m`#查看操作系统类型，这里适用于redHatif [[ $&#123;OS&#125; = &quot;Linux&quot; ]]; then&#123; KERNEL=`uname -r` #内核发布版本 if [ -f /etc/redhat-release ]; then # test -f filename, 测试是否为普通文件 &#123; DIST=&quot;RedHat&quot; Psuedoname=`cat /etc/redhat-release | sed s/.*\\(// | sed s/\\)//` REV=`cat /etc/redhat-release | sed s/.*release\\ // | sed s/\\ .*//` &#125; fi OSSTR=&quot;$&#123;OS&#125; $&#123;DIST&#125; $&#123;REV&#125;($&#123;Psuedoname&#125; $&#123;KERNEL&#125; $&#123;MACH&#125;)&quot;&#125;fiecho $&#123;OSSTR&#125; 代码说明： uname是查看系统版本的命令 [ -f /etc/redhat-release ] 文件测试指令 可以查看 http://coolshell.cn/articles/9104.html 获取sed帮助 2.5 监控系统的各种信息 查看DNScat /etc/resolv.conf | sed &#39;1d&#39; | awk &#39;{print $2}&#39; 解释说明 读取配置文件，删除第一行， 打印第二个字段 查看系统负载12loadverage=$(top -n 1 -b | grep &quot;load average:&quot; | awk &apos;&#123;print $10 $11 $12&#125;&apos;)echo -e &quot;\\E[32m load average: \\E[0m &quot;$&#123;loadverage&#125; 说明 top -n 1 只迭代一次，不会动态刷新， top -n 1 -b 示非动态打印系统资源使用情况 查看系统运行时间 12tecuptime=$(uptime | awk &apos;&#123;print $3,$4&#125;&apos; | cut -f1 -d&apos;,&apos;)echo -e &quot;\\E[32m System Uptime Days: \\E[0m &quot;$&#123;loadverage&#125; 说明 cut -f1 -d’,’: -f1选定第一列， -d&#39;* &#39; 表示用*分割 来源：https://superuser.com/questions/247127/what-is-and-in-linux 附录附录1： 不同操作系统查看操作系统类型12345678910111213141516171819202122232425262728293031323334if [ &quot;$&#123;OS&#125;&quot; = &quot;SunOS&quot; ] ; then OS=Solaris ARCH=`uname -p` OSSTR=&quot;$&#123;OS&#125; $&#123;REV&#125;($&#123;ARCH&#125; `uname -v`)&quot;# uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。elif [ &quot;$&#123;OS&#125;&quot; = &quot;AIX&quot; ] ; then OSSTR=&quot;$&#123;OS&#125; `oslevel` (`oslevel -r`)&quot;#AIX是IBM开发的一套类UNIX操作系统，关于它更多的指令可以查看http://www.cnblogs.com/sbaicl/articles/2947795.htmlelif [ &quot;$&#123;OS&#125;&quot; = &quot;Linux&quot; ] ; then KERNEL=`uname -r` if [ -f /etc/redhat-release ] ; then DIST=&apos;RedHat&apos; PSUEDONAME=`cat /etc/redhat-release | sed s/.*\\(// | sed s/\\)//` REV=`cat /etc/redhat-release | sed s/.*release\\ // | sed s/\\ .*//`#sed通常用来匹配一个或多个正则表达式的文本进行处理,可以查看http://coolshell.cn/articles/9104.html elif [ -f /etc/SuSE-release ] ; then DIST=`cat /etc/SuSE-release | tr &quot;\\n&quot; &apos; &apos;| sed s/VERSION.*//` REV=`cat /etc/SuSE-release | tr &quot;\\n&quot; &apos; &apos; | sed s/.*=\\ //` elif [ -f /etc/mandrake-release ] ; then DIST=&apos;Mandrake&apos; PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\\(// | sed s/\\)//` REV=`cat /etc/mandrake-release | sed s/.*release\\ // | sed s/\\ .*//` elif [ -f /etc/debian_version ] ; then DIST=&quot;Debian `cat /etc/debian_version`&quot; REV=&quot;&quot; fi if $&#123;OSSTR&#125; [ -f /etc/UnitedLinux-release ] ; then DIST=&quot;$&#123;DIST&#125;[`cat /etc/UnitedLinux-release | tr &quot;\\n&quot; &apos; &apos; | sed s/VERSION.*//`]&quot; fi OSSTR=&quot;$&#123;OS&#125; $&#123;DIST&#125; $&#123;REV&#125;($&#123;PSUEDONAME&#125; $&#123;KERNEL&#125; $&#123;MACH&#125;)&quot;fi","categories":[{"name":"Linux Shell","slug":"Linux-Shell","permalink":"http://yoursite.com/categories/Linux-Shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]}]}